DEBUG main org.hibernate.hql.internal.ast.ErrorCounter - throwQueryException() : no errors
DEBUG main org.hibernate.hql.internal.antlr.HqlSqlBaseWalker - select << begin [level=1, statement=select]
DEBUG main org.hibernate.hql.internal.ast.tree.FromElement - FromClause{level=1} : main.com.ssh.shop.entity.Whlist (w) -> whlist0_
DEBUG main org.hibernate.hql.internal.ast.tree.FromReferenceNode - Resolved : w -> whlist0_.ID
DEBUG main org.hibernate.hql.internal.ast.tree.DotNode - getDataType() : wno -> org.hibernate.type.IntegerType@2d9caaeb
DEBUG main org.hibernate.hql.internal.ast.tree.FromReferenceNode - Resolved : w.wno -> whlist0_.WNO
DEBUG main org.hibernate.hql.internal.ast.tree.FromReferenceNode - Resolved : w -> whlist0_.ID
DEBUG main org.hibernate.hql.internal.ast.tree.DotNode - getDataType() : goods -> org.hibernate.type.ManyToOneType(main.com.ssh.shop.entity.Goods)
DEBUG main org.hibernate.hql.internal.ast.tree.DotNode - dereferenceEntityJoin() : generating join for goods in main.com.ssh.shop.entity.Whlist (<no alias>) parent = [  ( . ( . whlist0_.ID goods ) name ) ]
DEBUG main org.hibernate.hql.internal.ast.tree.FromElement - FromClause{level=1} : main.com.ssh.shop.entity.Goods (<no alias>) -> goods1_
DEBUG main org.hibernate.hql.internal.ast.tree.FromClause - addJoinByPathMap() : w.goods -> ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=GOODS,tableAlias=goods1_,origin=WHLIST whlist0_,columns={whlist0_.goodid ,className=main.com.ssh.shop.entity.Goods}}
DEBUG main org.hibernate.hql.internal.ast.tree.FromReferenceNode - Resolved : w.goods -> whlist0_.goodid
DEBUG main org.hibernate.hql.internal.ast.tree.DotNode - getDataType() : name -> org.hibernate.type.StringType@2a3888c1
DEBUG main org.hibernate.hql.internal.ast.tree.FromReferenceNode - Resolved : w.goods.name -> goods1_.NAME
DEBUG main org.hibernate.hql.internal.antlr.HqlSqlBaseWalker - select : finishing up [level=1, statement=select]
DEBUG main org.hibernate.hql.internal.ast.HqlSqlWalker - processQuery() :  ( SELECT ( FromClause{level=1} WHLIST whlist0_ GOODS goods1_ ) ( where ( and ( = ( whlist0_.WNO whlist0_.ID wno ) ? ) ( = ( goods1_.NAME ( whlist0_.goodid whlist0_.ID goods ) name ) ? ) ) ) )
DEBUG main org.hibernate.hql.internal.ast.HqlSqlWalker - Derived SELECT clause created.
DEBUG main org.hibernate.hql.internal.ast.util.JoinProcessor - Using FROM fragment [WHLIST whlist0_]
DEBUG main org.hibernate.hql.internal.ast.util.SyntheticAndFactory - Using unprocessed WHERE-fragment [whlist0_.goodid=goods1_.ID]
DEBUG main org.hibernate.hql.internal.ast.util.SyntheticAndFactory - Using processed WHERE-fragment [whlist0_.goodid=goods1_.ID]
DEBUG main org.hibernate.hql.internal.antlr.HqlSqlBaseWalker - select >> end [level=1, statement=select]
DEBUG main org.hibernate.hql.internal.ast.QueryTranslatorImpl - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (WHLIST,GOODS)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'whlist0_.ID as ID1_7_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=w,role=null,tableName=WHLIST,tableAlias=whlist0_,origin=null,columns={,className=main.com.ssh.shop.entity.Whlist}}}
    |  \-[SQL_TOKEN] SqlFragment: 'whlist0_.GOODID as GOODID2_7_, whlist0_.goodid as goodid2_7_, whlist0_.Min as Min3_7_, whlist0_.NUM as NUM4_7_, whlist0_.wno as wno5_7_, whlist0_.WNO as WNO5_7_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=2, fromElements=2, fromElementByClassAlias=[w], fromElementByTableAlias=[whlist0_, goods1_], fromElementsByPath=[w.goods], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  +-[FROM_FRAGMENT] FromElement: 'WHLIST whlist0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=w,role=null,tableName=WHLIST,tableAlias=whlist0_,origin=null,columns={,className=main.com.ssh.shop.entity.Whlist}}
    |  \-[FROM_FRAGMENT] ImpliedFromElement: 'GOODS goods1_' ImpliedFromElement{implied,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=main.com.ssh.shop.entity.Whlist.goods,tableName=GOODS,tableAlias=goods1_,origin=WHLIST whlist0_,columns={whlist0_.goodid ,className=main.com.ssh.shop.entity.Goods}}
    \-[WHERE] SqlNode: 'where'
       +-[THETA_JOINS] SqlNode: '{theta joins}'
       |  \-[SQL_TOKEN] SqlFragment: 'whlist0_.goodid=goods1_.ID'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'whlist0_.WNO' {propertyName=wno,dereferenceType=PRIMITIVE,getPropertyPath=wno,path=w.wno,tableAlias=whlist0_,className=main.com.ssh.shop.entity.Whlist,classAlias=w}
          |  |  +-[ALIAS_REF] IdentNode: 'whlist0_.ID' {alias=w, className=main.com.ssh.shop.entity.Whlist, tableAlias=whlist0_}
          |  |  \-[IDENT] IdentNode: 'wno' {originalText=wno}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=wno, expectedType=org.hibernate.type.IntegerType@2d9caaeb}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'goods1_.NAME' {propertyName=name,dereferenceType=PRIMITIVE,getPropertyPath=name,path=w.goods.name,tableAlias=goods1_,className=main.com.ssh.shop.entity.Goods,classAlias=null}
             |  +-[DOT] DotNode: 'whlist0_.goodid' {propertyName=goods,dereferenceType=ENTITY,getPropertyPath=goods,path=w.goods,tableAlias=goods1_,className=main.com.ssh.shop.entity.Goods,classAlias=null}
             |  |  +-[ALIAS_REF] IdentNode: 'whlist0_.ID' {alias=w, className=main.com.ssh.shop.entity.Whlist, tableAlias=whlist0_}
             |  |  \-[IDENT] IdentNode: 'goods' {originalText=goods}
             |  \-[IDENT] IdentNode: 'name' {originalText=name}
             \-[NAMED_PARAM] ParameterNode: '?' {name=name, expectedType=org.hibernate.type.StringType@2a3888c1}

DEBUG main org.hibernate.hql.internal.ast.ErrorCounter - throwQueryException() : no errors
DEBUG main org.hibernate.hql.internal.ast.QueryTranslatorImpl - HQL: from main.com.ssh.shop.entity.Whlist as w where w.wno =:wno and w.goods.name=:name
DEBUG main org.hibernate.hql.internal.ast.QueryTranslatorImpl - SQL: select whlist0_.ID as ID1_7_, whlist0_.GOODID as GOODID2_7_, whlist0_.goodid as goodid2_7_, whlist0_.Min as Min3_7_, whlist0_.NUM as NUM4_7_, whlist0_.wno as wno5_7_, whlist0_.WNO as WNO5_7_ from WHLIST whlist0_ cross join GOODS goods1_ where whlist0_.goodid=goods1_.ID and whlist0_.WNO=? and goods1_.NAME=?
DEBUG main org.hibernate.hql.internal.ast.ErrorCounter - throwQueryException() : no errors
DEBUG main org.hibernate.SQL - 
    select
        whlist0_.ID as ID1_7_,
        whlist0_.GOODID as GOODID2_7_,
        whlist0_.goodid as goodid2_7_,
        whlist0_.Min as Min3_7_,
        whlist0_.NUM as NUM4_7_,
        whlist0_.wno as wno5_7_,
        whlist0_.WNO as WNO5_7_ 
    from
        WHLIST whlist0_ cross 
    join
        GOODS goods1_ 
    where
        whlist0_.goodid=goods1_.ID 
        and whlist0_.WNO=? 
        and goods1_.NAME=?
DEBUG main org.hibernate.loader.Loader - Result set row: 0
DEBUG main org.hibernate.loader.Loader - Result row: EntityKey[main.com.ssh.shop.entity.Whlist#1]
DEBUG main org.hibernate.engine.internal.TwoPhaseLoad - Resolving associations for [main.com.ssh.shop.entity.Whlist#1]
DEBUG main org.hibernate.SQL - 
    select
        goods0_.ID as ID1_0_0_,
        goods0_.NAME as NAME2_0_0_,
        goods0_.PIC as PIC3_0_0_,
        goods0_.PRICE as PRICE4_0_0_,
        goods0_.SAMARY as SAMARY5_0_0_,
        goods0_.TYPE as TYPE6_0_0_ 
    from
        GOODS goods0_ 
    where
        goods0_.ID=?
DEBUG main org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl - Starting ResultSet row #0
DEBUG main org.hibernate.loader.plan.exec.process.internal.EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
DEBUG main org.hibernate.engine.internal.TwoPhaseLoad - Resolving associations for [main.com.ssh.shop.entity.Goods#42]
DEBUG main org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [main.com.ssh.shop.entity.Goods#42]
DEBUG main org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader - Done entity load : main.com.ssh.shop.entity.Goods#42
DEBUG main org.hibernate.SQL - 
    select
        warehouse0_.ID as ID1_6_0_,
        warehouse0_.ADDRESS as ADDRESS2_6_0_,
        warehouse0_.NAME as NAME3_6_0_ 
    from
        WAREHOUSE warehouse0_ 
    where
        warehouse0_.ID=?
DEBUG main org.hibernate.loader.plan.exec.process.internal.ResultSetProcessorImpl - Starting ResultSet row #0
DEBUG main org.hibernate.loader.plan.exec.process.internal.EntityReferenceInitializerImpl - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
DEBUG main org.hibernate.engine.internal.TwoPhaseLoad - Resolving associations for [main.com.ssh.shop.entity.Warehouse#3]
DEBUG main org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [main.com.ssh.shop.entity.Warehouse#3]
DEBUG main org.hibernate.loader.entity.plan.AbstractLoadPlanBasedEntityLoader - Done entity load : main.com.ssh.shop.entity.Warehouse#3
DEBUG main org.hibernate.engine.internal.TwoPhaseLoad - Done materializing entity [main.com.ssh.shop.entity.Whlist#1]
DEBUG main org.springframework.orm.hibernate4.HibernateTransactionManager - Initiating transaction commit
DEBUG main org.springframework.orm.hibernate4.HibernateTransactionManager - Committing Hibernate transaction on Session [SessionImpl(PersistenceContext[entityKeys=[EntityKey[main.com.ssh.shop.entity.Warehouse#3], EntityKey[main.com.ssh.shop.entity.Whlist#1], EntityKey[main.com.ssh.shop.entity.Goods#42]],collectionKeys=[]];ActionQueue[insertions=org.hibernate.engine.spi.ExecutableList@388b401d updates=org.hibernate.engine.spi.ExecutableList@2bcec6a6 deletions=org.hibernate.engine.spi.ExecutableList@77a281fc orphanRemovals=org.hibernate.engine.spi.ExecutableList@4912d525 collectionCreations=org.hibernate.engine.spi.ExecutableList@2bfbffb2 collectionRemovals=org.hibernate.engine.spi.ExecutableList@765df79d collectionUpdates=org.hibernate.engine.spi.ExecutableList@151335cb collectionQueuedOps=org.hibernate.engine.spi.ExecutableList@4a7761b1 unresolvedInsertDependencies=UnresolvedEntityInsertActions[]])]
DEBUG main org.hibernate.engine.transaction.spi.AbstractTransactionImpl - committing
DEBUG main org.hibernate.event.internal.AbstractFlushingEventListener - Processing flush-time cascades
DEBUG main org.hibernate.event.internal.AbstractFlushingEventListener - Dirty checking collections
DEBUG main org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
DEBUG main org.hibernate.event.internal.AbstractFlushingEventListener - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
DEBUG main org.hibernate.internal.util.EntityPrinter - Listing entities:
DEBUG main org.hibernate.internal.util.EntityPrinter - main.com.ssh.shop.entity.Warehouse{address=二段路, name=菜鸟驿站, id=3}
DEBUG main org.hibernate.internal.util.EntityPrinter - main.com.ssh.shop.entity.Whlist{min=100, num=1000, goods=main.com.ssh.shop.entity.Goods#42, wno=3, id=1, goodid=42, warehouse=main.com.ssh.shop.entity.Warehouse#3}
DEBUG main org.hibernate.internal.util.EntityPrinter - main.com.ssh.shop.entity.Goods{price=3.0, name=雪碧, id=42, pic=pic\a29954f4-0e56-4d66-bd13-f5d7213d2355.jpg, type=饮料, samary=好喝的雪碧}
DEBUG main org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction - committed JDBC Connection
DEBUG main org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction - re-enabling autocommit
DEBUG main org.springframework.orm.hibernate4.HibernateTransactionManager - Closing Hibernate Session [SessionImpl(PersistenceContext[entityKeys=[EntityKey[main.com.ssh.shop.entity.Warehouse#3], EntityKey[main.com.ssh.shop.entity.Whlist#1], EntityKey[main.com.ssh.shop.entity.Goods#42]],collectionKeys=[]];ActionQueue[insertions=org.hibernate.engine.spi.ExecutableList@388b401d updates=org.hibernate.engine.spi.ExecutableList@2bcec6a6 deletions=org.hibernate.engine.spi.ExecutableList@77a281fc orphanRemovals=org.hibernate.engine.spi.ExecutableList@4912d525 collectionCreations=org.hibernate.engine.spi.ExecutableList@2bfbffb2 collectionRemovals=org.hibernate.engine.spi.ExecutableList@765df79d collectionUpdates=org.hibernate.engine.spi.ExecutableList@151335cb collectionQueuedOps=org.hibernate.engine.spi.ExecutableList@4a7761b1 unresolvedInsertDependencies=UnresolvedEntityInsertActions[]])] after transaction
DEBUG main org.hibernate.engine.jdbc.internal.LogicalConnectionImpl - Releasing JDBC connection
DEBUG main com.mchange.v2.async.ThreadPoolAsynchronousRunner - com.mchange.v2.async.ThreadPoolAsynchronousRunner@37ddb69a: Adding task to queue -- com.mchange.v2.resourcepool.BasicResourcePool$1RefurbishCheckinResourceTask@5782d777
DEBUG main com.mchange.v2.resourcepool.BasicResourcePool - trace com.mchange.v2.resourcepool.BasicResourcePool@5e8ac0e1 [managed: 3, unused: 2, excluded: 0] (e.g. com.mchange.v2.c3p0.impl.NewPooledConnection@7adf8df7)
DEBUG main org.hibernate.engine.jdbc.internal.LogicalConnectionImpl - Released JDBC connection
DEBUG main org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - After test method: context [DefaultTestContext@1e397ed7 testClass = testWhlistDao, testInstance = Test.Dao.testWhlistDao@ff5b51f, testMethod = testDao2@testWhlistDao, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@490ab905 testClass = testWhlistDao, locations = '{classpath:beans.xml}', classes = '{}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]], class annotated with @DirtiesContext [false] with mode [null], method annotated with @DirtiesContext [false] with mode [null].
DEBUG main org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - After test class: context [DefaultTestContext@1e397ed7 testClass = testWhlistDao, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@490ab905 testClass = testWhlistDao, locations = '{classpath:beans.xml}', classes = '{}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]], class annotated with @DirtiesContext [false] with mode [null].
INFO Thread-5 org.springframework.context.support.GenericApplicationContext - Closing org.springframework.context.support.GenericApplicationContext@63753b6d: startup date [Mon Dec 25 16:57:33 CST 2017]; root of context hierarchy
DEBUG Thread-5 org.springframework.beans.factory.support.DefaultListableBeanFactory - Returning cached instance of singleton bean 'lifecycleProcessor'
DEBUG Thread-5 org.springframework.beans.factory.support.DefaultListableBeanFactory - Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@460d0a57: defining beans [date,dataSource,sessionFactory,transactionManager,prop,org.springframework.transaction.config.internalTransactionalEventListenerFactory,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,advice,pointcut,org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor#0,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,baseAction,menuAction,providerAction,stockAction,userAction,warehouseAction,whlistAction,baseService,goodsService,menuService,orderService,providerService,stockService,userService,warehouseService,whlistService,baseDao,goodsDao,MenuDao,orderDao,providerDao,stockDao,userDao,warehouseDao,whlistDao,fileUpload,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor,org.springframework.context.annotation.ConfigurationClassPostProcessor.enhancedConfigurationProcessor]; root of factory hierarchy
DEBUG Thread-5 org.springframework.beans.factory.support.DefaultListableBeanFactory - Retrieved dependent beans for bean 'whlistDao': [Test.Dao.testWhlistDao]
DEBUG Thread-5 org.springframework.beans.factory.support.DefaultListableBeanFactory - Retrieved dependent beans for bean '(inner bean)#17ca8b92': [advice]
DEBUG Thread-5 org.springframework.beans.factory.support.DisposableBeanAdapter - Invoking destroy() on bean with name 'sessionFactory'
DEBUG Thread-5 org.hibernate.internal.SessionFactoryImpl - HHH000031: Closing
DEBUG Thread-5 org.hibernate.boot.registry.internal.BootstrapServiceRegistryImpl - Implicitly destroying Boot-strap registry on de-registration of all child ServiceRegistries
DEBUG Thread-5 org.hibernate.service.internal.AbstractServiceRegistryImpl - Implicitly destroying ServiceRegistry on de-registration of all child ServiceRegistries
